<?php


namespace app\api\controller;


use app\common\controller\Api;
use app\common\model\BaiduUrl;
use fast\Http;
use think\Db;

/**
 * 网盘采集
 * Class Pan
 * @package app\api\controller
 */
class Pan extends Api
{

    /**
     * 无需登录的方法,同时也就不需要鉴权了
     * @var array
     */
    protected $noNeedLogin = '*';

    /**
     * @var BaiduUrl
     */
    private $model = null;

    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

        $this->model = new BaiduUrl();
    }

    /**
     * baiDuPanSou
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function baiDuPanSou()
    {
        for ($i = 3; $i < 100; $i++) {
            $this->panSou((string)$i);
        }

    }

    private function panSou($keyword)
    {
        $i      = 0;
        $result = true;
        do {
            $proxyIP                    = $this->randomIP();
            $options[CURLOPT_PROXYTYPE] = $proxyIP['type'];//todo
            $options[CURLOPT_PROXY]     = $proxyIP['ip'];
            $i++;
            $data = Http::get('http://106.15.195.249:8011/search_new', ['q' => $keyword, 'p' => $i], $options);
            if (!$dataJson = json_decode($data, true)) {
                echo "{$data}:ip:{$proxyIP['ip']}\r\n";
                sleep(5);
                $proxyIP                    = $this->randomIP();
                $options[CURLOPT_PROXYTYPE] = $proxyIP['type'];//todo
                $options[CURLOPT_PROXY]     = $proxyIP['ip'];
                $data                       = Http::get('http://106.15.195.249:8011/search_new', ['q' => $keyword, 'p' => $i], $options);
                if (!$dataJson = json_decode($data, true)) {
                    echo "{$data}:ip:{$proxyIP['ip']}\r\n";
                    sleep(5);
                    $proxyIP                    = $this->randomIP();
                    $options[CURLOPT_PROXYTYPE] = $proxyIP['type'];//todo
                    $options[CURLOPT_PROXY]     = $proxyIP['ip'];
                    $data                       = Http::get('http://106.15.195.249:8011/search_new', ['q' => $keyword, 'p' => $i], $options);
                    if (!$dataJson = json_decode($data, true)) {
                        echo "{$data}:ip:{$proxyIP['ip']}\r\n";
                        continue;
                    }
                }
            }

            if ($dataJson['list']['count'] == 0) {
                echo "关键字:{$keyword}页数:{$i}, 已无数据\r\n";
                $result = false;
            }

            if ($dataJson['list']['p'] == 1 && $i != 1) {
                echo "关键字:{$keyword}页数:{$i}, 已无数据\r\n";
                $result = false;
            }

            if ($result) {
                $insertData = [];
                foreach ($dataJson['list']['data'] as $datum) {
                    $count = stripos($datum['link'], "com/s/");
                    if ($count == 0) {
                        continue;
                    }

                    $count        += 6;
                    $url          = substr($datum['link'], $count);
                    $insertData[] = [
                        'url' => $url,
                    ];
                }

                $this->model->insertAll($insertData, true);
                echo "关键字:{$keyword}页数:{$i}, 插入完成\r\n";
            }


        } while ($result);

    }

    public function randomIP()
    {
        switch (rand(1, 3)) {
            case 1:
                return [
                    'ip'   => $this->socks5(),
                    'type' => CURLPROXY_SOCKS5,
                ];
                break;
            case 2:
                return [
                    'ip'   => $this->socks4(),
                    'type' => CURLPROXY_SOCKS4,
                ];
                break;
            case 3:
                return [
                    'ip'   => $this->proxyHttp(),
                    'type' => CURLPROXY_HTTP,
                ];
                break;
        }
    }

    public function socks5()
    {
        $str = "125.65.92.104:7302";

        $data = explode("\n", $str);
        return $data[rand(0, (count($data) - 1))];
    }


    public function socks4()
    {
        $str = "120.236.254.183:1081
103.27.208.76:1080
112.16.5.62:1080
103.214.41.98:4145
103.242.168.23:46067
103.242.168.20:46067
112.6.133.224:51080
112.98.126.98:56231
114.104.189.119:1080
114.88.122.235:4145
111.75.223.9:39541
116.6.107.172:4145
117.79.80.91:4145
120.234.138.99:60419
123.150.94.82:57759
116.239.4.130:4145
119.57.115.57:30622
124.202.195.74:4153
118.186.17.243:36487
211.152.33.24:47019
119.57.115.55:30622
119.57.115.56:30622
123.169.102.82:4145
221.203.169.50:1080
221.214.110.130:1080
222.191.243.187:45730
222.74.65.69:38051
36.110.14.68:39069
164.52.42.2:4145
61.160.6.159:4145
47.244.7.97:1080
58.35.163.143:4145
59.148.42.146:4145
58.37.81.215:4145
58.215.120.178:33620
60.217.64.237:35292
58.215.120.180:33620
58.254.220.116:56424
60.12.214.184:46849
61.142.72.150:33235
180.174.2.69:4145
59.45.13.220:3629
61.48.42.138:4145";

        $data = explode("\n", $str);

        return $data[rand(0, (count($data) - 1))];
    }


    public function proxyHttp()
    {
        $str = "101.231.104.82:80
110.249.176.26:8060
113.65.5.6:8118
111.9.92.192:1080
113.0.53.233:8118
115.223.3.42:80
116.247.108.106:8060
114.97.184.41:61234
117.95.232.82:9999
120.78.79.150:8081
120.78.68.241:80
120.210.219.73:80
121.43.167.95:80
122.96.51.9:8080
124.156.108.71:82
125.94.44.129:1080
139.196.229.198:80
153.101.64.50:12034
150.138.106.174:84
180.76.150.182:9000
182.140.244.163:8118
182.35.80.113:9999
182.61.164.112:80
183.146.213.198:80
182.96.124.47:8118
183.154.55.39:9999
183.91.33.41:83
183.91.33.41:80
220.174.93.97:8060
218.14.108.53:8060
223.111.131.100:8080
223.111.131.100:80
222.66.94.130:80
222.223.162.133:3128
223.245.43.38:65309
27.152.91.8:9999
27.188.65.244:8060
36.25.40.242:9999
36.25.243.51:80
36.25.243.251:80
39.107.141.17:8888
39.106.223.134:80
42.159.91.248:8081
42.159.91.248:8080
47.106.192.167:8000
47.110.130.152:8080
47.75.11.94:8080
49.233.190.125:808
47.108.24.183:80
58.17.135.37:8060
58.208.202.98:61234
59.57.149.44:9999
59.57.149.65:9999
61.191.212.242:60213";

        $data = explode("\n", $str);

        return $data[rand(0, (count($data) - 1))];
    }


}